import data from './data.json';

const temps = [
  // 五言绝句， 平起式， 正格：
  // 平平仄仄平（ 韵）
  // 仄仄仄平平（ 韵）
  // 仄仄平平仄
  // 平平仄仄平（ 韵）
  ['A2-/A2+/B1-/，', 'A2+/A2-/B1-/。', 'A2+/A2-/A1+/，', 'A2-/A2+/B1-/。'],

  // 五言绝句， 仄起式， 偏格：
  // 仄仄平平仄
  // 平平仄仄平（ 韵）
  // 平平平仄仄
  // 仄仄仄平平（ 韵）
  ['A2+/A2-/A1+/，', 'A2-/A2+/B1-/。', 'A2-/A2+/A1+/，', 'A2+/A2-/B1-/。'],
  ['A2+/A2-/A1+/，', 'A2-/A2+/B1-/。', 'A2-/A1-/A2+/，', 'A2+/A1+/B2-/。'],

  // 五言绝句， 平起式， 偏格：
  // 平平平仄仄
  // 仄仄仄平平（ 韵）
  // 仄仄平平仄
  // 平平仄仄平（ 韵）
  ['A2-/A2+/A1+/，', 'A2+/A2-/B1-/。', 'A2+/A2-/A1+/，', 'A2-/A2+/B1-/。'],

  // 七言绝句， 仄起式， 正格：
  // 仄仄平平仄仄平（ 韵）
  // 平平仄仄仄平平（ 韵）
  // 平平仄仄平平仄
  // 仄仄平平仄仄平（ 韵）
  ['A2+/A2-/A2+/B1-/，', 'A2-/A2+/A2-/B1-/。', 'A2-/A2+/A2-/A1+/，', 'A2+/A2-/A2+/B1-/。'],

  // 七言绝句， 平起式， 正格：
  // 平平仄仄仄平平（ 韵）
  // 仄仄平平仄仄平（ 韵）
  // 仄仄平平平仄仄
  // 平平仄仄仄平平（ 韵）
  ['A2-/A2+/A2-/B1-/，', 'A2+/A2-/A2+/B1-/。', 'A2+/A2-/A2+/A1+/，', 'A2-/A2+/A2-/B1-/。'],
  ['A2-/A2+/A2-/B1-/，', 'A2+/A2-/A2+/B1-/。', 'A2+/A2-/A1-/A2+/，', 'A2-/A2+/A1+/B2-/。'],

  // 七言绝句， 仄起式， 偏格：
  // 仄仄平平平仄仄
  // 平平仄仄仄平平（ 韵）
  // 平平仄仄平平仄
  // 仄仄平平仄仄平（ 韵）
  ['A2+/A2-/A2+/A1+/，', 'A2-/A2+/A2-/B1-/。', 'A2-/A2+/A2-/A1+/，', 'A2+/A2-/A2+/B1-/。'],
  ['A2+/A2-/A1+/A2+/，', 'A2-/A2+/A1+/B2-/。', 'A2-/A2+/A2-/A1+/，', 'A2+/A2-/A2+/B1-/。'],

  // 七言绝句， 平起式， 偏格：
  // 平平仄仄平平仄
  // 仄仄平平仄仄平（ 韵）
  // 仄仄平平平仄仄
  // 平平仄仄仄平平（ 韵）
  ['A2-/A2+/A2-/A1+/，', 'A2+/A2-/A2+/B1-/。', 'A2+/A2-/A2-/A1+/，', 'A2-/A2+/A2-/B1-/。'],
  ['A2-/A2+/A2-/A1+/，', 'A2+/A2-/A2+/B1-/。', 'A2+/A2-/A1-/A2+/，', 'A2-/A2+/A1-/B2-/。'],

  // 卜算子
  // 仄仄仄平平，
  // 仄仄平平仄。
  // 仄仄平平仄仄平，
  // 仄仄平平仄。
  // 仄仄仄平平，
  // 仄仄平平仄。
  // 仄仄平平仄仄平，
  // 仄仄平平仄。
  [
    'A2+/A2-/A1-/，',
    'A2+/A2-/B1+/。',
    'A2+/A2-/A2+/A1-/，',
    'A2+/A2-/B1-/。',
    'A2+/A2-/A1-/，',
    'A2+/A2-/B1+/。',
    'A2+/A2-/A2+/A1-/，',
    'A2+/A2-/B1-/。',
  ],

  // 捣练子
  // 平仄仄，
  // 仄平平。
  // 仄仄平平仄仄平。
  // 仄仄平平平仄仄，
  // 平平仄仄仄平平。
  ['A1-/A2+/，', 'A1+/B2-/，', 'A2+/A2-/A2+/B1-/。', 'A2+/A2-/A1-/B2+/', 'A2-/A2+/A1+/B2-/。'],

  // 浪淘沙
  // 仄仄仄平平，仄仄平平。平平仄仄仄平平。仄仄平平平仄仄，仄仄平平。
  // 仄仄仄平平，仄仄平平。平平仄仄仄平平。仄仄平平平仄仄，仄仄平平。
  ['A2+/A1+/B2-/，', 'A2+/B2-/。', 'A2-/A2+/A2-/B1-/。', 'A2+/A2-/A2+/B1+/。', 'A2+/B2-/。'],

  // 木兰花
  // 平平仄仄，仄仄平平平仄仄。仄仄平平，仄仄平平仄仄平。
  // 平平仄仄，仄仄平平平仄仄。仄仄平平，仄仄平平仄仄平。
  ['A2-/A2+/，', 'A2+/B2-/A1-/B2+/。', 'A2+/A2-/。', 'A2+/A2-/A2+/B1-/。'],
];

function getRandomTemplate(birthday?: number) {
  let index = Math.floor(Math.random() * 2);
  if (birthday) {
    index = birthday % 15;
  }
  return temps[index];
}

function getTemplate(type: string, birthday?: number) {
  let index = 0;

  if (birthday) {
    index = type === '7' ? (birthday % 2) + 4 : birthday % 2;
  } else {
    index = type === '7' ? 5 : 0;
  }

  return temps[index];
}

function getModenPoem(birthday?: number) {
  let content = '';
  const tempData = [...data];
  let line = Math.floor((birthday ? Number(birthday) : Math.random()) * 16);
  if (line < 6) {
    line = 6;
  }
  for (let i = 0; i <= line; i++) {
    const current = Math.floor(Math.random() * (tempData.length - 1));
    content += `${tempData[current]}\n`;
    // 为避免重复，临时数据中删除已选中的分句
    tempData.splice(current, 1);
  }
  return content;
}

export { getRandomTemplate, getTemplate, getModenPoem };
